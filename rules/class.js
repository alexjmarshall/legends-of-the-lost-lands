// base_mv (race), size (race)
import { WEAPON_CATEGORIES, WEAPON_TIERS } from './weapons';
import { ARMOR_MATERIALS } from './armors';
import { SPELLCASTING_TYPES, MAX_SPELL_LEVELS } from './magic';

const ALL_WEAP_CATS = Object.values(WEAPON_CATEGORIES);
const ALL_WEAP_TIERS = Object.values(WEAPON_TIERS);
const ALL_ARMORS = Object.keys(ARMOR_MATERIALS);
const NON_METAL_ARMORS = Object.keys(ARMOR_MATERIALS).filter((k) => !ARMOR_MATERIALS[k].metal);
const NON_BULKY_ARMORS = Object.keys(ARMOR_MATERIALS).filter((k) => !ARMOR_MATERIALS[k].bulky);

export default { // TODO aura of threat around character
  fighter: { // TODO aura type active effects that get added to other characters in radius
    xp_thresholds: [
      0,
      1000,
      3000,
      7000,
      15000,
      30000,
      60000,
      120000,
      240000,
      360000,
      480000,
      600000,
      720000,
      840000,
    ],
    titles: [
      'Veteran',
      'Warrior',
      'Swordsman',
      'Hero',
      'Gladiator',
      'Dominator',
      'Champion',
      'Super Hero',
      'Lord',
      'Lord (10th)',
      'Lord (11th)',
      'Lord (12th)',
      'Lord (13th)',
      'Lord (14th)',
    ],
    bab: (lvl) => Number(lvl),
    base_ac: 10,
    base_sv: (lvl) => Number(lvl) + 1,
    base_mv_adj: 0,
    allowed_weap_profs: ALL_WEAP_CATS, // TODO -2 penalty
    allowed_weap_tiers: ALL_WEAP_TIERS, // TODO -3 penalty
    allowed_armors: ALL_ARMORS,
    variants: {
      BERSERKER: 'berserker',
      DUELLIST: 'duellist',
    },
  },
  cleric: {
    xp_thresholds: [
      0,
      800,
      2400,
      5600,
      12000,
      25000,
      55000,
      110000,
      220000,
      330000,
      440000,
      550000,
      660000,
      770000,
    ],
    titles: [
      'Acolyte',
      'Adept',
      'Curate',
      'Vicar',
      'Priest',
      'Bishop',
      'Lama',
      'Hierarch',
      'High Priest',
      'High Priest (10th)',
      'High Priest (11th)',
      'High Priest (12th)',
      'High Priest (13th)',
      'High Priest (14th)',
    ],
    spell_casting: SPELLCASTING_TYPES.SPELLCASTING_CLERIC,
    spell_slots: [
      [],
      [1],
      [2],
      [2, 1],
      [2, 2],
      [2, 2, 1],
      [2, 2, 2],
      [2, 2, 2, 1],
      [3, 3, 2, 2],
      [3, 3, 3, 3, 1],
      [4, 4, 4, 3, 2],
      [4, 4, 4, 3, 3, 1],
      [5, 5, 5, 4, 4, 2],
      [5, 5, 5, 5, 5, 3],
    ],
    bab: (lvl) => Math.floor((Number(lvl) * 2) / 3),
    base_ac: 10,
    base_sv: (lvl) => Number(lvl) + 1,
    base_mv_adj: 0,
    allowed_weap_profs: [
      WEAPON_CATEGORIES.BLUDGEON,
      WEAPON_CATEGORIES.SPIKED_BLUDGEON,
      WEAPON_CATEGORIES.HAMMER,
      WEAPON_CATEGORIES.HAND_TO_HAND, // TODO use round up for x 1.5 STR dmg if 2 hand
      WEAPON_CATEGORIES.SLING,
      WEAPON_CATEGORIES.STAFF,
      WEAPON_CATEGORIES.WHIP,
    ],
    allowed_weap_tiers: WEAPON_TIERS.SIMPLE, // TODO if weapon has bleed > 0, apply blunt dmg (1d3) IF alignment is non-evil
    allowed_armors: ALL_ARMORS,
    variants: {
      CLOISTERED_CLERIC: 'cloistered cleric',
      RUNEPRIEST: 'runepriest',
    },
  },
  mage: {
    xp_thresholds: [
      0,
      1200,
      3600,
      8400,
      20000,
      35000,
      50000,
      75000,
      100000,
      200000,
      300000,
      400000,
      500000,
      600000,
    ],
    titles: [
      'Medium',
      'Seer',
      'Conjurer',
      'Theurgist',
      'Thaumaturgist',
      'Occultist',
      'Magician',
      'Enchanter',
      'Sorcerer',
      'Necromancer',
      'Wizard',
      'Wizard (12th)',
      'Wizard (13th)',
      'Wizard (14th)',
    ],
    spell_casting: SPELLCASTING_TYPES.SPELLCASTING_MAGIC,
    spell_slots: [
      [1],
      [2],
      [3, 1],
      [4, 2],
      [4, 2, 1],
      [4, 2, 2],
      [4, 3, 3, 2],
      [4, 3, 3, 2, 1],
      [4, 4, 3, 3, 2],
      [4, 4, 4, 3, 3],
      [4, 4, 4, 4, 4, 1],
      [5, 5, 5, 4, 4, 2],
      [5, 5, 5, 4, 4, 3, 1],
      [5, 5, 5, 4, 4, 4, 2],
    ],
    bab: (lvl) => Math.floor(Number(lvl) / 2),
    base_ac: 10,
    base_sv: (lvl) => Number(lvl),
    base_mv_adj: 0,
    allowed_weap_profs: [
      WEAPON_CATEGORIES.DAGGER,
      WEAPON_CATEGORIES.SLING,
      WEAPON_CATEGORIES.STAFF,
    ],
    allowed_weap_tiers: WEAPON_TIERS.SIMPLE,
    allowed_armors: [],
    variants: {},
  },
  thief: {
    xp_thresholds: [
      0,
      600,
      1800,
      4200,
      9600,
      20000,
      40000,
      70000,
      110000,
      160000,
      220000,
      360000,
      500000,
      640000,
    ],
    titles: [
      'Apprentice',
      'Footpad',
      'Cutpurse',
      'Robber',
      'Burglar',
      'Filcher',
      'Sharper',
      'Pilferer',
      'Magsman',
      'Thief',
      'Master Thief',
      'Master Thief (12th)',
      'Master Thief (13th)',
      'Master Thief (14th)',
    ],
    bab: (lvl) => Math.floor((Number(lvl) * 2) / 3),
    base_ac: 10,
    base_sv: (lvl) => Number(lvl),
    base_mv_adj: 0,
    allowed_weap_profs: [
      WEAPON_CATEGORIES.DAGGER,
      WEAPON_CATEGORIES.BLUDGEON,
      WEAPON_CATEGORIES.HAND_TO_HAND,
      WEAPON_CATEGORIES.SLING,
      WEAPON_CATEGORIES.CURVED_SWORD,
      WEAPON_CATEGORIES.PIERCING_SWORD,
      WEAPON_CATEGORIES.STRAIGHT_SWORD,
    ],
    allowed_weap_tiers: WEAPON_TIERS.SIMPLE, // TODO is simple relative to category, e.g. make all single-handed swords simple for thieves
    allowed_armors: NON_BULKY_ARMORS,
    variants: {
      ASSASSIN: 'assassin',
      SWASHBUCKLER: 'swashbuckler',
    },
  }, // TODO add class features here? have to do it by variant
};
